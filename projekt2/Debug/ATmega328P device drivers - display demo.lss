
ATmega328P device drivers - display demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000a5a  00000aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800102  00800102  00000af0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000189e  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf7  00000000  00000000  0000257e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d06  00000000  00000000  00003275  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00003f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000952  00000000  00000000  000042f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b0e  00000000  00000000  00004c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005750  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 33       	cpi	r26, 0x37	; 55
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 10 03 	call	0x620	; 0x620 <main>
  9e:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <button_init>:

   self->pin = 0;
   self->pullup = 0;
   self->input = 0;
   self->pcmsk = 0;
   self->pcint = 0;
  a6:	fc 01       	movw	r30, r24
  a8:	68 30       	cpi	r22, 0x08	; 8
  aa:	80 f4       	brcc	.+32     	; 0xcc <button_init+0x26>
  ac:	60 83       	st	Z, r22
  ae:	8b e2       	ldi	r24, 0x2B	; 43
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	92 83       	std	Z+2, r25	; 0x02
  b4:	81 83       	std	Z+1, r24	; 0x01
  b6:	89 e2       	ldi	r24, 0x29	; 41
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	94 83       	std	Z+4, r25	; 0x04
  bc:	83 83       	std	Z+3, r24	; 0x03
  be:	8d e6       	ldi	r24, 0x6D	; 109
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	96 83       	std	Z+6, r25	; 0x06
  c4:	85 83       	std	Z+5, r24	; 0x05
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	87 83       	std	Z+7, r24	; 0x07
  ca:	25 c0       	rjmp	.+74     	; 0x116 <button_init+0x70>
  cc:	88 ef       	ldi	r24, 0xF8	; 248
  ce:	86 0f       	add	r24, r22
  d0:	86 30       	cpi	r24, 0x06	; 6
  d2:	78 f4       	brcc	.+30     	; 0xf2 <button_init+0x4c>
  d4:	80 83       	st	Z, r24
  d6:	85 e2       	ldi	r24, 0x25	; 37
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	92 83       	std	Z+2, r25	; 0x02
  dc:	81 83       	std	Z+1, r24	; 0x01
  de:	83 e2       	ldi	r24, 0x23	; 35
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	94 83       	std	Z+4, r25	; 0x04
  e4:	83 83       	std	Z+3, r24	; 0x03
  e6:	8b e6       	ldi	r24, 0x6B	; 107
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	96 83       	std	Z+6, r25	; 0x06
  ec:	85 83       	std	Z+5, r24	; 0x05
  ee:	17 82       	std	Z+7, r1	; 0x07
  f0:	12 c0       	rjmp	.+36     	; 0x116 <button_init+0x70>
  f2:	6e 50       	subi	r22, 0x0E	; 14
  f4:	66 30       	cpi	r22, 0x06	; 6
  f6:	78 f4       	brcc	.+30     	; 0x116 <button_init+0x70>
  f8:	60 83       	st	Z, r22
  fa:	88 e2       	ldi	r24, 0x28	; 40
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	92 83       	std	Z+2, r25	; 0x02
 100:	81 83       	std	Z+1, r24	; 0x01
 102:	86 e2       	ldi	r24, 0x26	; 38
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	94 83       	std	Z+4, r25	; 0x04
 108:	83 83       	std	Z+3, r24	; 0x03
 10a:	8c e6       	ldi	r24, 0x6C	; 108
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	96 83       	std	Z+6, r25	; 0x06
 110:	85 83       	std	Z+5, r24	; 0x05
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	87 83       	std	Z+7, r24	; 0x07
 116:	a1 81       	ldd	r26, Z+1	; 0x01
 118:	b2 81       	ldd	r27, Z+2	; 0x02
 11a:	2c 91       	ld	r18, X
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	00 80       	ld	r0, Z
 122:	02 c0       	rjmp	.+4      	; 0x128 <button_init+0x82>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <button_init+0x7e>
 12c:	82 2b       	or	r24, r18
 12e:	8c 93       	st	X, r24
 130:	08 95       	ret

00000132 <button_enable_interrupt>:
*
*                          - self: Pekare till tryckknappen som PCI-avbrott
*                                  ska aktiveras på.
********************************************************************************/
void button_enable_interrupt(struct button* self)
{
 132:	fc 01       	movw	r30, r24
   asm("SEI");
 134:	78 94       	sei
   PCICR |= (1 << self->pcint);
 136:	87 81       	ldd	r24, Z+7	; 0x07
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	a9 01       	movw	r20, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <button_enable_interrupt+0x12>
 140:	44 0f       	add	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	8a 95       	dec	r24
 146:	e2 f7       	brpl	.-8      	; 0x140 <button_enable_interrupt+0xe>
 148:	ca 01       	movw	r24, r20
 14a:	a8 e6       	ldi	r26, 0x68	; 104
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	9c 91       	ld	r25, X
 150:	89 2b       	or	r24, r25
 152:	8c 93       	st	X, r24
   *(self->pcmsk) |= (1 << self->pin);
 154:	a5 81       	ldd	r26, Z+5	; 0x05
 156:	b6 81       	ldd	r27, Z+6	; 0x06
 158:	8c 91       	ld	r24, X
 15a:	00 80       	ld	r0, Z
 15c:	02 c0       	rjmp	.+4      	; 0x162 <button_enable_interrupt+0x30>
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <button_enable_interrupt+0x2c>
 166:	28 2b       	or	r18, r24
 168:	2c 93       	st	X, r18
 16a:	08 95       	ret

0000016c <display_init>:
********************************************************************************/
void display_set_count(const enum display_count_direction direction,
                       const uint16_t count_speed_ms)
{
   count_direction = direction;
   timer_set_new_time(&timer_count_speed, count_speed_ms);
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	8a b9       	out	0x0a, r24	; 10
 170:	87 b1       	in	r24, 0x07	; 7
 172:	88 60       	ori	r24, 0x08	; 8
 174:	87 b9       	out	0x07, r24	; 7
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	80 68       	ori	r24, 0x80	; 128
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	88 b1       	in	r24, 0x08	; 8
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	88 b9       	out	0x08, r24	; 8
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e8       	ldi	r20, 0x80	; 128
 188:	5f e3       	ldi	r21, 0x3F	; 63
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	8e e0       	ldi	r24, 0x0E	; 14
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 71 03 	call	0x6e2	; 0x6e2 <timer_init>
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	48 ec       	ldi	r20, 0xC8	; 200
 19a:	52 e4       	ldi	r21, 0x42	; 66
 19c:	62 e0       	ldi	r22, 0x02	; 2
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <timer_init>
 1a6:	08 95       	ret

000001a8 <display_output_enabled>:
 1a8:	ee e0       	ldi	r30, 0x0E	; 14
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	a0 85       	ldd	r26, Z+8	; 0x08
 1ae:	b1 85       	ldd	r27, Z+9	; 0x09
 1b0:	4c 91       	ld	r20, X
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	c9 01       	movw	r24, r18
 1b8:	02 84       	ldd	r0, Z+10	; 0x0a
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <display_output_enabled+0x18>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <display_output_enabled+0x14>
 1c4:	24 2f       	mov	r18, r20
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	28 23       	and	r18, r24
 1ca:	39 23       	and	r19, r25
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	23 2b       	or	r18, r19
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <display_output_enabled+0x2c>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	08 95       	ret

000001d6 <display_count_enabled>:
 1d6:	e2 e0       	ldi	r30, 0x02	; 2
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
 1da:	a0 85       	ldd	r26, Z+8	; 0x08
 1dc:	b1 85       	ldd	r27, Z+9	; 0x09
 1de:	4c 91       	ld	r20, X
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	c9 01       	movw	r24, r18
 1e6:	02 84       	ldd	r0, Z+10	; 0x0a
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <display_count_enabled+0x18>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <display_count_enabled+0x14>
 1f2:	24 2f       	mov	r18, r20
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	28 23       	and	r18, r24
 1f8:	39 23       	and	r19, r25
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	23 2b       	or	r18, r19
 1fe:	09 f4       	brne	.+2      	; 0x202 <display_count_enabled+0x2c>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	08 95       	ret

00000204 <display_enable_output>:
 204:	ae e0       	ldi	r26, 0x0E	; 14
 206:	b1 e0       	ldi	r27, 0x01	; 1
 208:	18 96       	adiw	r26, 0x08	; 8
 20a:	ed 91       	ld	r30, X+
 20c:	fc 91       	ld	r31, X
 20e:	19 97       	sbiw	r26, 0x09	; 9
 210:	20 81       	ld	r18, Z
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	1a 96       	adiw	r26, 0x0a	; 10
 218:	0c 90       	ld	r0, X
 21a:	02 c0       	rjmp	.+4      	; 0x220 <display_enable_output+0x1c>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	0a 94       	dec	r0
 222:	e2 f7       	brpl	.-8      	; 0x21c <display_enable_output+0x18>
 224:	82 2b       	or	r24, r18
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <display_disable_output>:
 22a:	8e e0       	ldi	r24, 0x0E	; 14
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 ac 03 	call	0x758	; 0x758 <timer_reset>
 232:	8b b1       	in	r24, 0x0b	; 11
 234:	80 68       	ori	r24, 0x80	; 128
 236:	8b b9       	out	0x0b, r24	; 11
 238:	88 b1       	in	r24, 0x08	; 8
 23a:	88 60       	ori	r24, 0x08	; 8
 23c:	88 b9       	out	0x08, r24	; 8
 23e:	08 95       	ret

00000240 <display_toggle_output>:
 240:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <display_output_enabled>
 244:	88 23       	and	r24, r24
 246:	19 f0       	breq	.+6      	; 0x24e <display_toggle_output+0xe>
 248:	0e 94 15 01 	call	0x22a	; 0x22a <display_disable_output>
 24c:	08 95       	ret
 24e:	0e 94 02 01 	call	0x204	; 0x204 <display_enable_output>
 252:	08 95       	ret

00000254 <display_set_number>:
 254:	28 2f       	mov	r18, r24
 256:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25a:	82 17       	cp	r24, r18
 25c:	90 f0       	brcs	.+36     	; 0x282 <display_set_number+0x2e>
 25e:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <number>
 262:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <radix>
 266:	82 2f       	mov	r24, r18
 268:	63 2f       	mov	r22, r19
 26a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__udivmodqi4>
 26e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <digit1>
 272:	38 9f       	mul	r19, r24
 274:	20 19       	sub	r18, r0
 276:	11 24       	eor	r1, r1
 278:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <digit2>
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	08 95       	ret
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	08 95       	ret

00000288 <display_toggle_digit>:
 288:	ee e0       	ldi	r30, 0x0E	; 14
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	80 81       	ld	r24, Z
 28e:	91 81       	ldd	r25, Z+1	; 0x01
 290:	a2 81       	ldd	r26, Z+2	; 0x02
 292:	b3 81       	ldd	r27, Z+3	; 0x03
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	a1 1d       	adc	r26, r1
 298:	b1 1d       	adc	r27, r1
 29a:	80 83       	st	Z, r24
 29c:	91 83       	std	Z+1, r25	; 0x01
 29e:	a2 83       	std	Z+2, r26	; 0x02
 2a0:	b3 83       	std	Z+3, r27	; 0x03
 2a2:	cf 01       	movw	r24, r30
 2a4:	0e 94 96 03 	call	0x72c	; 0x72c <timer_elapsed>
 2a8:	88 23       	and	r24, r24
 2aa:	09 f4       	brne	.+2      	; 0x2ae <display_toggle_digit+0x26>
 2ac:	ac c0       	rjmp	.+344    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <current_digit>
 2b4:	91 11       	cpse	r25, r1
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <current_digit>
 2bc:	81 11       	cpse	r24, r1
 2be:	56 c0       	rjmp	.+172    	; 0x36c <display_toggle_digit+0xe4>
 2c0:	88 b1       	in	r24, 0x08	; 8
 2c2:	88 60       	ori	r24, 0x08	; 8
 2c4:	88 b9       	out	0x08, r24	; 8
 2c6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <digit1>
 2ca:	81 11       	cpse	r24, r1
 2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <display_toggle_digit+0x4e>
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	8b b9       	out	0x0b, r24	; 11
 2d4:	08 95       	ret
 2d6:	8b b1       	in	r24, 0x0b	; 11
 2d8:	8f 77       	andi	r24, 0x7F	; 127
 2da:	8b b9       	out	0x0b, r24	; 11
 2dc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <digit1>
 2e0:	9b b1       	in	r25, 0x0b	; 11
 2e2:	90 78       	andi	r25, 0x80	; 128
 2e4:	9b b9       	out	0x0b, r25	; 11
 2e6:	88 23       	and	r24, r24
 2e8:	01 f1       	breq	.+64     	; 0x32a <display_toggle_digit+0xa2>
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	01 f1       	breq	.+64     	; 0x32e <display_toggle_digit+0xa6>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	01 f1       	breq	.+64     	; 0x332 <display_toggle_digit+0xaa>
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	01 f1       	breq	.+64     	; 0x336 <display_toggle_digit+0xae>
 2f6:	84 30       	cpi	r24, 0x04	; 4
 2f8:	01 f1       	breq	.+64     	; 0x33a <display_toggle_digit+0xb2>
 2fa:	85 30       	cpi	r24, 0x05	; 5
 2fc:	01 f1       	breq	.+64     	; 0x33e <display_toggle_digit+0xb6>
 2fe:	86 30       	cpi	r24, 0x06	; 6
 300:	01 f1       	breq	.+64     	; 0x342 <display_toggle_digit+0xba>
 302:	87 30       	cpi	r24, 0x07	; 7
 304:	79 f1       	breq	.+94     	; 0x364 <display_toggle_digit+0xdc>
 306:	88 30       	cpi	r24, 0x08	; 8
 308:	f1 f0       	breq	.+60     	; 0x346 <display_toggle_digit+0xbe>
 30a:	89 30       	cpi	r24, 0x09	; 9
 30c:	f1 f0       	breq	.+60     	; 0x34a <display_toggle_digit+0xc2>
 30e:	8a 30       	cpi	r24, 0x0A	; 10
 310:	f1 f0       	breq	.+60     	; 0x34e <display_toggle_digit+0xc6>
 312:	8b 30       	cpi	r24, 0x0B	; 11
 314:	f1 f0       	breq	.+60     	; 0x352 <display_toggle_digit+0xca>
 316:	8c 30       	cpi	r24, 0x0C	; 12
 318:	f1 f0       	breq	.+60     	; 0x356 <display_toggle_digit+0xce>
 31a:	8d 30       	cpi	r24, 0x0D	; 13
 31c:	f1 f0       	breq	.+60     	; 0x35a <display_toggle_digit+0xd2>
 31e:	8e 30       	cpi	r24, 0x0E	; 14
 320:	f1 f0       	breq	.+60     	; 0x35e <display_toggle_digit+0xd6>
 322:	8f 30       	cpi	r24, 0x0F	; 15
 324:	f1 f4       	brne	.+60     	; 0x362 <display_toggle_digit+0xda>
 326:	81 e7       	ldi	r24, 0x71	; 113
 328:	1d c0       	rjmp	.+58     	; 0x364 <display_toggle_digit+0xdc>
 32a:	8f e3       	ldi	r24, 0x3F	; 63
 32c:	1b c0       	rjmp	.+54     	; 0x364 <display_toggle_digit+0xdc>
 32e:	86 e0       	ldi	r24, 0x06	; 6
 330:	19 c0       	rjmp	.+50     	; 0x364 <display_toggle_digit+0xdc>
 332:	8b e5       	ldi	r24, 0x5B	; 91
 334:	17 c0       	rjmp	.+46     	; 0x364 <display_toggle_digit+0xdc>
 336:	8f e4       	ldi	r24, 0x4F	; 79
 338:	15 c0       	rjmp	.+42     	; 0x364 <display_toggle_digit+0xdc>
 33a:	86 e6       	ldi	r24, 0x66	; 102
 33c:	13 c0       	rjmp	.+38     	; 0x364 <display_toggle_digit+0xdc>
 33e:	8d e6       	ldi	r24, 0x6D	; 109
 340:	11 c0       	rjmp	.+34     	; 0x364 <display_toggle_digit+0xdc>
 342:	8d e7       	ldi	r24, 0x7D	; 125
 344:	0f c0       	rjmp	.+30     	; 0x364 <display_toggle_digit+0xdc>
 346:	8f e7       	ldi	r24, 0x7F	; 127
 348:	0d c0       	rjmp	.+26     	; 0x364 <display_toggle_digit+0xdc>
 34a:	8f e6       	ldi	r24, 0x6F	; 111
 34c:	0b c0       	rjmp	.+22     	; 0x364 <display_toggle_digit+0xdc>
 34e:	87 e7       	ldi	r24, 0x77	; 119
 350:	09 c0       	rjmp	.+18     	; 0x364 <display_toggle_digit+0xdc>
 352:	8c e7       	ldi	r24, 0x7C	; 124
 354:	07 c0       	rjmp	.+14     	; 0x364 <display_toggle_digit+0xdc>
 356:	89 e3       	ldi	r24, 0x39	; 57
 358:	05 c0       	rjmp	.+10     	; 0x364 <display_toggle_digit+0xdc>
 35a:	8e e5       	ldi	r24, 0x5E	; 94
 35c:	03 c0       	rjmp	.+6      	; 0x364 <display_toggle_digit+0xdc>
 35e:	89 e7       	ldi	r24, 0x79	; 121
 360:	01 c0       	rjmp	.+2      	; 0x364 <display_toggle_digit+0xdc>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	9b b1       	in	r25, 0x0b	; 11
 366:	89 2b       	or	r24, r25
 368:	8b b9       	out	0x0b, r24	; 11
 36a:	08 95       	ret
 36c:	8b b1       	in	r24, 0x0b	; 11
 36e:	80 68       	ori	r24, 0x80	; 128
 370:	8b b9       	out	0x0b, r24	; 11
 372:	88 b1       	in	r24, 0x08	; 8
 374:	87 7f       	andi	r24, 0xF7	; 247
 376:	88 b9       	out	0x08, r24	; 8
 378:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <digit2>
 37c:	9b b1       	in	r25, 0x0b	; 11
 37e:	90 78       	andi	r25, 0x80	; 128
 380:	9b b9       	out	0x0b, r25	; 11
 382:	88 23       	and	r24, r24
 384:	01 f1       	breq	.+64     	; 0x3c6 <display_toggle_digit+0x13e>
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	01 f1       	breq	.+64     	; 0x3ca <display_toggle_digit+0x142>
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	01 f1       	breq	.+64     	; 0x3ce <display_toggle_digit+0x146>
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	01 f1       	breq	.+64     	; 0x3d2 <display_toggle_digit+0x14a>
 392:	84 30       	cpi	r24, 0x04	; 4
 394:	01 f1       	breq	.+64     	; 0x3d6 <display_toggle_digit+0x14e>
 396:	85 30       	cpi	r24, 0x05	; 5
 398:	01 f1       	breq	.+64     	; 0x3da <display_toggle_digit+0x152>
 39a:	86 30       	cpi	r24, 0x06	; 6
 39c:	01 f1       	breq	.+64     	; 0x3de <display_toggle_digit+0x156>
 39e:	87 30       	cpi	r24, 0x07	; 7
 3a0:	79 f1       	breq	.+94     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3a2:	88 30       	cpi	r24, 0x08	; 8
 3a4:	f1 f0       	breq	.+60     	; 0x3e2 <display_toggle_digit+0x15a>
 3a6:	89 30       	cpi	r24, 0x09	; 9
 3a8:	f1 f0       	breq	.+60     	; 0x3e6 <display_toggle_digit+0x15e>
 3aa:	8a 30       	cpi	r24, 0x0A	; 10
 3ac:	f1 f0       	breq	.+60     	; 0x3ea <display_toggle_digit+0x162>
 3ae:	8b 30       	cpi	r24, 0x0B	; 11
 3b0:	f1 f0       	breq	.+60     	; 0x3ee <display_toggle_digit+0x166>
 3b2:	8c 30       	cpi	r24, 0x0C	; 12
 3b4:	f1 f0       	breq	.+60     	; 0x3f2 <display_toggle_digit+0x16a>
 3b6:	8d 30       	cpi	r24, 0x0D	; 13
 3b8:	f1 f0       	breq	.+60     	; 0x3f6 <display_toggle_digit+0x16e>
 3ba:	8e 30       	cpi	r24, 0x0E	; 14
 3bc:	f1 f0       	breq	.+60     	; 0x3fa <display_toggle_digit+0x172>
 3be:	8f 30       	cpi	r24, 0x0F	; 15
 3c0:	f1 f4       	brne	.+60     	; 0x3fe <display_toggle_digit+0x176>
 3c2:	81 e7       	ldi	r24, 0x71	; 113
 3c4:	1d c0       	rjmp	.+58     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3c6:	8f e3       	ldi	r24, 0x3F	; 63
 3c8:	1b c0       	rjmp	.+54     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3ca:	86 e0       	ldi	r24, 0x06	; 6
 3cc:	19 c0       	rjmp	.+50     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3ce:	8b e5       	ldi	r24, 0x5B	; 91
 3d0:	17 c0       	rjmp	.+46     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3d2:	8f e4       	ldi	r24, 0x4F	; 79
 3d4:	15 c0       	rjmp	.+42     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3d6:	86 e6       	ldi	r24, 0x66	; 102
 3d8:	13 c0       	rjmp	.+38     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3da:	8d e6       	ldi	r24, 0x6D	; 109
 3dc:	11 c0       	rjmp	.+34     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3de:	8d e7       	ldi	r24, 0x7D	; 125
 3e0:	0f c0       	rjmp	.+30     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3e2:	8f e7       	ldi	r24, 0x7F	; 127
 3e4:	0d c0       	rjmp	.+26     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3e6:	8f e6       	ldi	r24, 0x6F	; 111
 3e8:	0b c0       	rjmp	.+22     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3ea:	87 e7       	ldi	r24, 0x77	; 119
 3ec:	09 c0       	rjmp	.+18     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3ee:	8c e7       	ldi	r24, 0x7C	; 124
 3f0:	07 c0       	rjmp	.+14     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f2:	89 e3       	ldi	r24, 0x39	; 57
 3f4:	05 c0       	rjmp	.+10     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f6:	8e e5       	ldi	r24, 0x5E	; 94
 3f8:	03 c0       	rjmp	.+6      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fa:	89 e7       	ldi	r24, 0x79	; 121
 3fc:	01 c0       	rjmp	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	9b b1       	in	r25, 0x0b	; 11
 402:	89 2b       	or	r24, r25
 404:	8b b9       	out	0x0b, r24	; 11
 406:	08 95       	ret

00000408 <display_count>:
 408:	e2 e0       	ldi	r30, 0x02	; 2
 40a:	f1 e0       	ldi	r31, 0x01	; 1
 40c:	80 81       	ld	r24, Z
 40e:	91 81       	ldd	r25, Z+1	; 0x01
 410:	a2 81       	ldd	r26, Z+2	; 0x02
 412:	b3 81       	ldd	r27, Z+3	; 0x03
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	a1 1d       	adc	r26, r1
 418:	b1 1d       	adc	r27, r1
 41a:	80 83       	st	Z, r24
 41c:	91 83       	std	Z+1, r25	; 0x01
 41e:	a2 83       	std	Z+2, r26	; 0x02
 420:	b3 83       	std	Z+3, r27	; 0x03
 422:	cf 01       	movw	r24, r30
 424:	0e 94 96 03 	call	0x72c	; 0x72c <timer_elapsed>
 428:	88 23       	and	r24, r24
 42a:	e9 f0       	breq	.+58     	; 0x466 <display_count+0x5e>
 42c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <count_direction>
 430:	81 11       	cpse	r24, r1
 432:	0d c0       	rjmp	.+26     	; 0x44e <display_count+0x46>
 434:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <number>
 438:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 43c:	89 17       	cp	r24, r25
 43e:	18 f0       	brcs	.+6      	; 0x446 <display_count+0x3e>
 440:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <number>
 444:	10 c0       	rjmp	.+32     	; 0x466 <display_count+0x5e>
 446:	8f 5f       	subi	r24, 0xFF	; 255
 448:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <number>
 44c:	0c c0       	rjmp	.+24     	; 0x466 <display_count+0x5e>
 44e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <number>
 452:	81 11       	cpse	r24, r1
 454:	05 c0       	rjmp	.+10     	; 0x460 <display_count+0x58>
 456:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 45a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <number>
 45e:	03 c0       	rjmp	.+6      	; 0x466 <display_count+0x5e>
 460:	81 50       	subi	r24, 0x01	; 1
 462:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <number>
 466:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <number>
 46a:	0e 94 2a 01 	call	0x254	; 0x254 <display_set_number>
 46e:	08 95       	ret

00000470 <display_toggle_count_direction>:
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <count_direction>
 476:	91 11       	cpse	r25, r1
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <count_direction>
 47e:	08 95       	ret

00000480 <display_enable_count>:
*                         - self: Pekare till timern som timergenererat
*                                 avbrott ska aktiveras på.
********************************************************************************/
static inline void timer_enable_interrupt(struct timer* self)
{
   *(self->timsk) |= (1 << self->timsk_bit);
 480:	a2 e0       	ldi	r26, 0x02	; 2
 482:	b1 e0       	ldi	r27, 0x01	; 1
 484:	18 96       	adiw	r26, 0x08	; 8
 486:	ed 91       	ld	r30, X+
 488:	fc 91       	ld	r31, X
 48a:	19 97       	sbiw	r26, 0x09	; 9
 48c:	20 81       	ld	r18, Z
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	1a 96       	adiw	r26, 0x0a	; 10
 494:	0c 90       	ld	r0, X
 496:	02 c0       	rjmp	.+4      	; 0x49c <display_enable_count+0x1c>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	0a 94       	dec	r0
 49e:	e2 f7       	brpl	.-8      	; 0x498 <display_enable_count+0x18>
 4a0:	82 2b       	or	r24, r18
 4a2:	80 83       	st	Z, r24
 4a4:	08 95       	ret

000004a6 <display_disable_count>:
* display_disable_count: Inaktiverar upp- eller nedräkning av tal som skrivs ut
*                        på 7-segmentsdisplayerna.
********************************************************************************/
void display_disable_count(void)
{
   timer_reset(&timer_count_speed);
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	0e 94 ac 03 	call	0x758	; 0x758 <timer_reset>
 4ae:	08 95       	ret

000004b0 <display_toggle_count>:
* display_toggle_count: Togglar upp- eller nedräkning av tal som skrivs ut på
*                       7-segmentsdisplayerna.
**********ö**********************************************************************/
void display_toggle_count(void)
{
   if (display_count_enabled())
 4b0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <display_count_enabled>
 4b4:	88 23       	and	r24, r24
 4b6:	19 f0       	breq	.+6      	; 0x4be <display_toggle_count+0xe>
   {
      display_disable_count();
 4b8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <display_disable_count>
 4bc:	08 95       	ret
   }
   else
   {
      display_enable_count();
 4be:	0e 94 40 02 	call	0x480	; 0x480 <display_enable_count>
 4c2:	08 95       	ret

000004c4 <__vector_3>:

/********************************************************************************
* ISR (PCINT0_vect)
********************************************************************************/
ISR(PCINT0_vect)
{
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	2f 93       	push	r18
 4d0:	3f 93       	push	r19
 4d2:	4f 93       	push	r20
 4d4:	5f 93       	push	r21
 4d6:	6f 93       	push	r22
 4d8:	7f 93       	push	r23
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	af 93       	push	r26
 4e0:	bf 93       	push	r27
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
*
*                    - self: Pekare till tryckknappen som ska läsas av.
********************************************************************************/
static inline bool button_is_pressed(const struct button* self)
{
   return (*(self->input) & (1 << self->pin));
 4e6:	ef e2       	ldi	r30, 0x2F	; 47
 4e8:	f1 e0       	ldi	r31, 0x01	; 1
 4ea:	a3 81       	ldd	r26, Z+3	; 0x03
 4ec:	b4 81       	ldd	r27, Z+4	; 0x04
 4ee:	4c 91       	ld	r20, X
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	9c 01       	movw	r18, r24
 4f6:	00 80       	ld	r0, Z
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <__vector_3+0x3a>
 4fa:	22 0f       	add	r18, r18
 4fc:	33 1f       	adc	r19, r19
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <__vector_3+0x36>
 502:	84 2f       	mov	r24, r20
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	82 23       	and	r24, r18
 508:	93 23       	and	r25, r19
	if(button_is_pressed(&button1))
 50a:	89 2b       	or	r24, r25
 50c:	19 f0       	breq	.+6      	; 0x514 <__vector_3+0x50>
	{
		display_toggle_count();
 50e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <display_toggle_count>
 512:	2d c0       	rjmp	.+90     	; 0x56e <__vector_3+0xaa>
 514:	ef e1       	ldi	r30, 0x1F	; 31
 516:	f1 e0       	ldi	r31, 0x01	; 1
 518:	a3 81       	ldd	r26, Z+3	; 0x03
 51a:	b4 81       	ldd	r27, Z+4	; 0x04
 51c:	4c 91       	ld	r20, X
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	9c 01       	movw	r18, r24
 524:	00 80       	ld	r0, Z
 526:	02 c0       	rjmp	.+4      	; 0x52c <__vector_3+0x68>
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	0a 94       	dec	r0
 52e:	e2 f7       	brpl	.-8      	; 0x528 <__vector_3+0x64>
 530:	84 2f       	mov	r24, r20
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	82 23       	and	r24, r18
 536:	93 23       	and	r25, r19
	}
	else if(button_is_pressed(&button2))
 538:	89 2b       	or	r24, r25
 53a:	19 f0       	breq	.+6      	; 0x542 <__vector_3+0x7e>
	{
		display_toggle_count_direction();
 53c:	0e 94 38 02 	call	0x470	; 0x470 <display_toggle_count_direction>
 540:	16 c0       	rjmp	.+44     	; 0x56e <__vector_3+0xaa>
 542:	e7 e2       	ldi	r30, 0x27	; 39
 544:	f1 e0       	ldi	r31, 0x01	; 1
 546:	a3 81       	ldd	r26, Z+3	; 0x03
 548:	b4 81       	ldd	r27, Z+4	; 0x04
 54a:	4c 91       	ld	r20, X
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	9c 01       	movw	r18, r24
 552:	00 80       	ld	r0, Z
 554:	02 c0       	rjmp	.+4      	; 0x55a <__vector_3+0x96>
 556:	22 0f       	add	r18, r18
 558:	33 1f       	adc	r19, r19
 55a:	0a 94       	dec	r0
 55c:	e2 f7       	brpl	.-8      	; 0x556 <__vector_3+0x92>
 55e:	84 2f       	mov	r24, r20
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	82 23       	and	r24, r18
 564:	93 23       	and	r25, r19
	}
	else if(button_is_pressed(&button3))
 566:	89 2b       	or	r24, r25
 568:	11 f0       	breq	.+4      	; 0x56e <__vector_3+0xaa>
	{
		display_toggle_output();
 56a:	0e 94 20 01 	call	0x240	; 0x240 <display_toggle_output>
	}
}
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <__vector_11>:
*                          millisekund när timern är aktiverad. En gång per
*                          millisekund togglas talet utskrivet på 
*                          7-segmentsdisplayerna mellan tiotal och ental.
********************************************************************************/
ISR (TIMER1_COMPA_vect)
{
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	2f 93       	push	r18
 59c:	3f 93       	push	r19
 59e:	4f 93       	push	r20
 5a0:	5f 93       	push	r21
 5a2:	6f 93       	push	r22
 5a4:	7f 93       	push	r23
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31
   display_toggle_digit();
 5b2:	0e 94 44 01 	call	0x288	; 0x288 <display_toggle_digit>
   return;
}
 5b6:	ff 91       	pop	r31
 5b8:	ef 91       	pop	r30
 5ba:	bf 91       	pop	r27
 5bc:	af 91       	pop	r26
 5be:	9f 91       	pop	r25
 5c0:	8f 91       	pop	r24
 5c2:	7f 91       	pop	r23
 5c4:	6f 91       	pop	r22
 5c6:	5f 91       	pop	r21
 5c8:	4f 91       	pop	r20
 5ca:	3f 91       	pop	r19
 5cc:	2f 91       	pop	r18
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <__vector_9>:
*                        Timer 2 i Normal Mode, vilket sker var 0.128:e
*                        millisekund när timern är aktiverad. En gång per sekund
*                        inkrementeras talet utskrivet på 7-segmentsdisplayerna.
********************************************************************************/
ISR (TIMER2_OVF_vect)
{
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	2f 93       	push	r18
 5e4:	3f 93       	push	r19
 5e6:	4f 93       	push	r20
 5e8:	5f 93       	push	r21
 5ea:	6f 93       	push	r22
 5ec:	7f 93       	push	r23
 5ee:	8f 93       	push	r24
 5f0:	9f 93       	push	r25
 5f2:	af 93       	push	r26
 5f4:	bf 93       	push	r27
 5f6:	ef 93       	push	r30
 5f8:	ff 93       	push	r31
   display_count();
 5fa:	0e 94 04 02 	call	0x408	; 0x408 <display_count>
   return;
}
 5fe:	ff 91       	pop	r31
 600:	ef 91       	pop	r30
 602:	bf 91       	pop	r27
 604:	af 91       	pop	r26
 606:	9f 91       	pop	r25
 608:	8f 91       	pop	r24
 60a:	7f 91       	pop	r23
 60c:	6f 91       	pop	r22
 60e:	5f 91       	pop	r21
 610:	4f 91       	pop	r20
 612:	3f 91       	pop	r19
 614:	2f 91       	pop	r18
 616:	0f 90       	pop	r0
 618:	0f be       	out	0x3f, r0	; 63
 61a:	0f 90       	pop	r0
 61c:	1f 90       	pop	r1
 61e:	18 95       	reti

00000620 <main>:
*
*           - timeout_ms: Timeout mätt i millisekunder.
********************************************************************************/
static inline void wdt_init(const enum wdt_timeout timeout_ms)
{
   asm("CLI");
 620:	f8 94       	cli
   WDTCSR = (1 << WDE) | (1 << WDCE);
 622:	e0 e6       	ldi	r30, 0x60	; 96
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	88 e1       	ldi	r24, 0x18	; 24
 628:	80 83       	st	Z, r24
   WDTCSR = (1 << WDE) | (uint8_t)(timeout_ms);
 62a:	8e e0       	ldi	r24, 0x0E	; 14
 62c:	80 83       	st	Z, r24
   asm("SEI");
 62e:	78 94       	sei
   WDTCSR &= ~(1 << WDE);
 630:	80 81       	ld	r24, Z
 632:	87 7f       	andi	r24, 0xF7	; 247
 634:	80 83       	st	Z, r24
* wdt_reset: Återställer Watchdog-timern, vilket måste ske kontinuerligt innan
*            timern löper ut för att undvika systemåterställning eller avbrott.
********************************************************************************/
static inline void wdt_reset(void)
{
   asm("CLI");
 636:	f8 94       	cli
   asm("WDR");
 638:	a8 95       	wdr
   MCUSR &= ~(1 << WDRF);
 63a:	84 b7       	in	r24, 0x34	; 52
 63c:	87 7f       	andi	r24, 0xF7	; 247
 63e:	84 bf       	out	0x34, r24	; 52
   asm("SEI");
 640:	78 94       	sei
*                       äger rum ifall Watchdog-timern löper ut.
********************************************************************************/
static inline void wdt_enable_interrupt(void)
{
   wdt_reset();
   WDTCSR |= (1 << WDIE);
 642:	80 81       	ld	r24, Z
 644:	80 64       	ori	r24, 0x40	; 64
 646:	80 83       	st	Z, r24
static inline void setup(void)
{
   wdt_init(WDT_TIMEOUT_1024_MS);
   wdt_enable_interrupt();
   
   button_init(&button1, 11);
 648:	6b e0       	ldi	r22, 0x0B	; 11
 64a:	8f e2       	ldi	r24, 0x2F	; 47
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	0e 94 53 00 	call	0xa6	; 0xa6 <button_init>
   button_enable_interrupt(&button1);
 652:	8f e2       	ldi	r24, 0x2F	; 47
 654:	91 e0       	ldi	r25, 0x01	; 1
 656:	0e 94 99 00 	call	0x132	; 0x132 <button_enable_interrupt>
   button_init(&button2, 12);
 65a:	6c e0       	ldi	r22, 0x0C	; 12
 65c:	8f e1       	ldi	r24, 0x1F	; 31
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	0e 94 53 00 	call	0xa6	; 0xa6 <button_init>
   button_enable_interrupt(&button2);
 664:	8f e1       	ldi	r24, 0x1F	; 31
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	0e 94 99 00 	call	0x132	; 0x132 <button_enable_interrupt>
   button_init(&button3, 13);
 66c:	6d e0       	ldi	r22, 0x0D	; 13
 66e:	87 e2       	ldi	r24, 0x27	; 39
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 53 00 	call	0xa6	; 0xa6 <button_init>
   button_enable_interrupt(&button3);
 676:	87 e2       	ldi	r24, 0x27	; 39
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	0e 94 99 00 	call	0x132	; 0x132 <button_enable_interrupt>

   display_init();
 67e:	0e 94 b6 00 	call	0x16c	; 0x16c <display_init>
* wdt_reset: Återställer Watchdog-timern, vilket måste ske kontinuerligt innan
*            timern löper ut för att undvika systemåterställning eller avbrott.
********************************************************************************/
static inline void wdt_reset(void)
{
   asm("CLI");
 682:	f8 94       	cli
   asm("WDR");
 684:	a8 95       	wdr
   MCUSR &= ~(1 << WDRF);
 686:	84 b7       	in	r24, 0x34	; 52
 688:	87 7f       	andi	r24, 0xF7	; 247
 68a:	84 bf       	out	0x34, r24	; 52
   asm("SEI");
 68c:	78 94       	sei
 68e:	f9 cf       	rjmp	.-14     	; 0x682 <main+0x62>

00000690 <timer_init_circuit>:
 690:	fc 01       	movw	r30, r24
 692:	83 85       	ldd	r24, Z+11	; 0x0b
 694:	81 11       	cpse	r24, r1
 696:	08 c0       	rjmp	.+16     	; 0x6a8 <timer_init_circuit+0x18>
 698:	82 e0       	ldi	r24, 0x02	; 2
 69a:	85 bd       	out	0x25, r24	; 37
 69c:	8e e6       	ldi	r24, 0x6E	; 110
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	91 87       	std	Z+9, r25	; 0x09
 6a2:	80 87       	std	Z+8, r24	; 0x08
 6a4:	12 86       	std	Z+10, r1	; 0x0a
 6a6:	1b c0       	rjmp	.+54     	; 0x6de <timer_init_circuit+0x4e>
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	81 f4       	brne	.+32     	; 0x6cc <timer_init_circuit+0x3c>
 6ac:	8a e0       	ldi	r24, 0x0A	; 10
 6ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 6ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 6be:	8f e6       	ldi	r24, 0x6F	; 111
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	91 87       	std	Z+9, r25	; 0x09
 6c4:	80 87       	std	Z+8, r24	; 0x08
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	82 87       	std	Z+10, r24	; 0x0a
 6ca:	09 c0       	rjmp	.+18     	; 0x6de <timer_init_circuit+0x4e>
 6cc:	82 30       	cpi	r24, 0x02	; 2
 6ce:	39 f4       	brne	.+14     	; 0x6de <timer_init_circuit+0x4e>
 6d0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 6d4:	80 e7       	ldi	r24, 0x70	; 112
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	91 87       	std	Z+9, r25	; 0x09
 6da:	80 87       	std	Z+8, r24	; 0x08
 6dc:	12 86       	std	Z+10, r1	; 0x0a
 6de:	78 94       	sei
 6e0:	08 95       	ret

000006e2 <timer_init>:
 6e2:	1f 93       	push	r17
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	ec 01       	movw	r28, r24
 6ea:	16 2f       	mov	r17, r22
 6ec:	ca 01       	movw	r24, r20
 6ee:	b9 01       	movw	r22, r18
 6f0:	18 82       	st	Y, r1
 6f2:	19 82       	std	Y+1, r1	; 0x01
 6f4:	1a 82       	std	Y+2, r1	; 0x02
 6f6:	1b 82       	std	Y+3, r1	; 0x03
 6f8:	2f e6       	ldi	r18, 0x6F	; 111
 6fa:	32 e1       	ldi	r19, 0x12	; 18
 6fc:	43 e0       	ldi	r20, 0x03	; 3
 6fe:	5e e3       	ldi	r21, 0x3E	; 62
 700:	0e 94 2d 04 	call	0x85a	; 0x85a <__divsf3>
 704:	20 e0       	ldi	r18, 0x00	; 0
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	40 e0       	ldi	r20, 0x00	; 0
 70a:	5f e3       	ldi	r21, 0x3F	; 63
 70c:	0e 94 c1 03 	call	0x782	; 0x782 <__addsf3>
 710:	0e 94 9f 04 	call	0x93e	; 0x93e <__fixunssfsi>
 714:	6c 83       	std	Y+4, r22	; 0x04
 716:	7d 83       	std	Y+5, r23	; 0x05
 718:	8e 83       	std	Y+6, r24	; 0x06
 71a:	9f 83       	std	Y+7, r25	; 0x07
 71c:	1b 87       	std	Y+11, r17	; 0x0b
 71e:	ce 01       	movw	r24, r28
 720:	0e 94 48 03 	call	0x690	; 0x690 <timer_init_circuit>
 724:	df 91       	pop	r29
 726:	cf 91       	pop	r28
 728:	1f 91       	pop	r17
 72a:	08 95       	ret

0000072c <timer_elapsed>:
*                inför nästa uppräkning.
*
*                - self: Pekare till timern som ska kontrolleras.
********************************************************************************/
bool timer_elapsed(struct timer* self)
{
 72c:	fc 01       	movw	r30, r24
   if (self->counter >= self->max_count)
 72e:	40 81       	ld	r20, Z
 730:	51 81       	ldd	r21, Z+1	; 0x01
 732:	62 81       	ldd	r22, Z+2	; 0x02
 734:	73 81       	ldd	r23, Z+3	; 0x03
 736:	84 81       	ldd	r24, Z+4	; 0x04
 738:	95 81       	ldd	r25, Z+5	; 0x05
 73a:	a6 81       	ldd	r26, Z+6	; 0x06
 73c:	b7 81       	ldd	r27, Z+7	; 0x07
 73e:	48 17       	cp	r20, r24
 740:	59 07       	cpc	r21, r25
 742:	6a 07       	cpc	r22, r26
 744:	7b 07       	cpc	r23, r27
 746:	30 f0       	brcs	.+12     	; 0x754 <timer_elapsed+0x28>
   {
     self->counter = 0;
 748:	10 82       	st	Z, r1
 74a:	11 82       	std	Z+1, r1	; 0x01
 74c:	12 82       	std	Z+2, r1	; 0x02
 74e:	13 82       	std	Z+3, r1	; 0x03
     return true;
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	08 95       	ret
   }
   else
   {
      return false;
 754:	80 e0       	ldi	r24, 0x00	; 0
   }
}
 756:	08 95       	ret

00000758 <timer_reset>:
* timer_reset: Återställer angiven timer till startläget.
*
               - self: Pekare till timern som ska återställas.
********************************************************************************/
void timer_reset(struct timer* self)
{
 758:	fc 01       	movw	r30, r24
*                          - self: Pekare till timern som timergenererat
*                                  avbrott ska inaktiveras på.
********************************************************************************/
static inline void timer_disable_interrupt(struct timer* self)
{
   *(self->timsk) &= ~(1 << self->timsk_bit);
 75a:	a0 85       	ldd	r26, Z+8	; 0x08
 75c:	b1 85       	ldd	r27, Z+9	; 0x09
 75e:	8c 91       	ld	r24, X
 760:	21 e0       	ldi	r18, 0x01	; 1
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	02 84       	ldd	r0, Z+10	; 0x0a
 766:	02 c0       	rjmp	.+4      	; 0x76c <timer_reset+0x14>
 768:	22 0f       	add	r18, r18
 76a:	33 1f       	adc	r19, r19
 76c:	0a 94       	dec	r0
 76e:	e2 f7       	brpl	.-8      	; 0x768 <timer_reset+0x10>
 770:	20 95       	com	r18
 772:	28 23       	and	r18, r24
 774:	2c 93       	st	X, r18
   timer_disable_interrupt(self);
   self->counter = 0;
 776:	10 82       	st	Z, r1
 778:	11 82       	std	Z+1, r1	; 0x01
 77a:	12 82       	std	Z+2, r1	; 0x02
 77c:	13 82       	std	Z+3, r1	; 0x03
 77e:	08 95       	ret

00000780 <__subsf3>:
 780:	50 58       	subi	r21, 0x80	; 128

00000782 <__addsf3>:
 782:	bb 27       	eor	r27, r27
 784:	aa 27       	eor	r26, r26
 786:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__addsf3x>
 78a:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_round>
 78e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fp_pscA>
 792:	38 f0       	brcs	.+14     	; 0x7a2 <__addsf3+0x20>
 794:	0e 94 de 04 	call	0x9bc	; 0x9bc <__fp_pscB>
 798:	20 f0       	brcs	.+8      	; 0x7a2 <__addsf3+0x20>
 79a:	39 f4       	brne	.+14     	; 0x7aa <__addsf3+0x28>
 79c:	9f 3f       	cpi	r25, 0xFF	; 255
 79e:	19 f4       	brne	.+6      	; 0x7a6 <__addsf3+0x24>
 7a0:	26 f4       	brtc	.+8      	; 0x7aa <__addsf3+0x28>
 7a2:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_nan>
 7a6:	0e f4       	brtc	.+2      	; 0x7aa <__addsf3+0x28>
 7a8:	e0 95       	com	r30
 7aa:	e7 fb       	bst	r30, 7
 7ac:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_inf>

000007b0 <__addsf3x>:
 7b0:	e9 2f       	mov	r30, r25
 7b2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__fp_split3>
 7b6:	58 f3       	brcs	.-42     	; 0x78e <__addsf3+0xc>
 7b8:	ba 17       	cp	r27, r26
 7ba:	62 07       	cpc	r22, r18
 7bc:	73 07       	cpc	r23, r19
 7be:	84 07       	cpc	r24, r20
 7c0:	95 07       	cpc	r25, r21
 7c2:	20 f0       	brcs	.+8      	; 0x7cc <__addsf3x+0x1c>
 7c4:	79 f4       	brne	.+30     	; 0x7e4 <__addsf3x+0x34>
 7c6:	a6 f5       	brtc	.+104    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7c8:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_zero>
 7cc:	0e f4       	brtc	.+2      	; 0x7d0 <__addsf3x+0x20>
 7ce:	e0 95       	com	r30
 7d0:	0b 2e       	mov	r0, r27
 7d2:	ba 2f       	mov	r27, r26
 7d4:	a0 2d       	mov	r26, r0
 7d6:	0b 01       	movw	r0, r22
 7d8:	b9 01       	movw	r22, r18
 7da:	90 01       	movw	r18, r0
 7dc:	0c 01       	movw	r0, r24
 7de:	ca 01       	movw	r24, r20
 7e0:	a0 01       	movw	r20, r0
 7e2:	11 24       	eor	r1, r1
 7e4:	ff 27       	eor	r31, r31
 7e6:	59 1b       	sub	r21, r25
 7e8:	99 f0       	breq	.+38     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7ea:	59 3f       	cpi	r21, 0xF9	; 249
 7ec:	50 f4       	brcc	.+20     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7ee:	50 3e       	cpi	r21, 0xE0	; 224
 7f0:	68 f1       	brcs	.+90     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 7f2:	1a 16       	cp	r1, r26
 7f4:	f0 40       	sbci	r31, 0x00	; 0
 7f6:	a2 2f       	mov	r26, r18
 7f8:	23 2f       	mov	r18, r19
 7fa:	34 2f       	mov	r19, r20
 7fc:	44 27       	eor	r20, r20
 7fe:	58 5f       	subi	r21, 0xF8	; 248
 800:	f3 cf       	rjmp	.-26     	; 0x7e8 <__addsf3x+0x38>
 802:	46 95       	lsr	r20
 804:	37 95       	ror	r19
 806:	27 95       	ror	r18
 808:	a7 95       	ror	r26
 80a:	f0 40       	sbci	r31, 0x00	; 0
 80c:	53 95       	inc	r21
 80e:	c9 f7       	brne	.-14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 810:	7e f4       	brtc	.+30     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 812:	1f 16       	cp	r1, r31
 814:	ba 0b       	sbc	r27, r26
 816:	62 0b       	sbc	r22, r18
 818:	73 0b       	sbc	r23, r19
 81a:	84 0b       	sbc	r24, r20
 81c:	ba f0       	brmi	.+46     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 81e:	91 50       	subi	r25, 0x01	; 1
 820:	a1 f0       	breq	.+40     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 822:	ff 0f       	add	r31, r31
 824:	bb 1f       	adc	r27, r27
 826:	66 1f       	adc	r22, r22
 828:	77 1f       	adc	r23, r23
 82a:	88 1f       	adc	r24, r24
 82c:	c2 f7       	brpl	.-16     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 82e:	0e c0       	rjmp	.+28     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 830:	ba 0f       	add	r27, r26
 832:	62 1f       	adc	r22, r18
 834:	73 1f       	adc	r23, r19
 836:	84 1f       	adc	r24, r20
 838:	48 f4       	brcc	.+18     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 83a:	87 95       	ror	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b7 95       	ror	r27
 842:	f7 95       	ror	r31
 844:	9e 3f       	cpi	r25, 0xFE	; 254
 846:	08 f0       	brcs	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 848:	b0 cf       	rjmp	.-160    	; 0x7aa <__addsf3+0x28>
 84a:	93 95       	inc	r25
 84c:	88 0f       	add	r24, r24
 84e:	08 f0       	brcs	.+2      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 850:	99 27       	eor	r25, r25
 852:	ee 0f       	add	r30, r30
 854:	97 95       	ror	r25
 856:	87 95       	ror	r24
 858:	08 95       	ret

0000085a <__divsf3>:
 85a:	0e 94 41 04 	call	0x882	; 0x882 <__divsf3x>
 85e:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_round>
 862:	0e 94 de 04 	call	0x9bc	; 0x9bc <__fp_pscB>
 866:	58 f0       	brcs	.+22     	; 0x87e <__divsf3+0x24>
 868:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fp_pscA>
 86c:	40 f0       	brcs	.+16     	; 0x87e <__divsf3+0x24>
 86e:	29 f4       	brne	.+10     	; 0x87a <__divsf3+0x20>
 870:	5f 3f       	cpi	r21, 0xFF	; 255
 872:	29 f0       	breq	.+10     	; 0x87e <__divsf3+0x24>
 874:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_inf>
 878:	51 11       	cpse	r21, r1
 87a:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_szero>
 87e:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_nan>

00000882 <__divsf3x>:
 882:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__fp_split3>
 886:	68 f3       	brcs	.-38     	; 0x862 <__divsf3+0x8>

00000888 <__divsf3_pse>:
 888:	99 23       	and	r25, r25
 88a:	b1 f3       	breq	.-20     	; 0x878 <__divsf3+0x1e>
 88c:	55 23       	and	r21, r21
 88e:	91 f3       	breq	.-28     	; 0x874 <__divsf3+0x1a>
 890:	95 1b       	sub	r25, r21
 892:	55 0b       	sbc	r21, r21
 894:	bb 27       	eor	r27, r27
 896:	aa 27       	eor	r26, r26
 898:	62 17       	cp	r22, r18
 89a:	73 07       	cpc	r23, r19
 89c:	84 07       	cpc	r24, r20
 89e:	38 f0       	brcs	.+14     	; 0x8ae <__divsf3_pse+0x26>
 8a0:	9f 5f       	subi	r25, 0xFF	; 255
 8a2:	5f 4f       	sbci	r21, 0xFF	; 255
 8a4:	22 0f       	add	r18, r18
 8a6:	33 1f       	adc	r19, r19
 8a8:	44 1f       	adc	r20, r20
 8aa:	aa 1f       	adc	r26, r26
 8ac:	a9 f3       	breq	.-22     	; 0x898 <__divsf3_pse+0x10>
 8ae:	35 d0       	rcall	.+106    	; 0x91a <__stack+0x1b>
 8b0:	0e 2e       	mov	r0, r30
 8b2:	3a f0       	brmi	.+14     	; 0x8c2 <__divsf3_pse+0x3a>
 8b4:	e0 e8       	ldi	r30, 0x80	; 128
 8b6:	32 d0       	rcall	.+100    	; 0x91c <__stack+0x1d>
 8b8:	91 50       	subi	r25, 0x01	; 1
 8ba:	50 40       	sbci	r21, 0x00	; 0
 8bc:	e6 95       	lsr	r30
 8be:	00 1c       	adc	r0, r0
 8c0:	ca f7       	brpl	.-14     	; 0x8b4 <__divsf3_pse+0x2c>
 8c2:	2b d0       	rcall	.+86     	; 0x91a <__stack+0x1b>
 8c4:	fe 2f       	mov	r31, r30
 8c6:	29 d0       	rcall	.+82     	; 0x91a <__stack+0x1b>
 8c8:	66 0f       	add	r22, r22
 8ca:	77 1f       	adc	r23, r23
 8cc:	88 1f       	adc	r24, r24
 8ce:	bb 1f       	adc	r27, r27
 8d0:	26 17       	cp	r18, r22
 8d2:	37 07       	cpc	r19, r23
 8d4:	48 07       	cpc	r20, r24
 8d6:	ab 07       	cpc	r26, r27
 8d8:	b0 e8       	ldi	r27, 0x80	; 128
 8da:	09 f0       	breq	.+2      	; 0x8de <__divsf3_pse+0x56>
 8dc:	bb 0b       	sbc	r27, r27
 8de:	80 2d       	mov	r24, r0
 8e0:	bf 01       	movw	r22, r30
 8e2:	ff 27       	eor	r31, r31
 8e4:	93 58       	subi	r25, 0x83	; 131
 8e6:	5f 4f       	sbci	r21, 0xFF	; 255
 8e8:	3a f0       	brmi	.+14     	; 0x8f8 <__divsf3_pse+0x70>
 8ea:	9e 3f       	cpi	r25, 0xFE	; 254
 8ec:	51 05       	cpc	r21, r1
 8ee:	78 f0       	brcs	.+30     	; 0x90e <__stack+0xf>
 8f0:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_inf>
 8f4:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_szero>
 8f8:	5f 3f       	cpi	r21, 0xFF	; 255
 8fa:	e4 f3       	brlt	.-8      	; 0x8f4 <__divsf3_pse+0x6c>
 8fc:	98 3e       	cpi	r25, 0xE8	; 232
 8fe:	d4 f3       	brlt	.-12     	; 0x8f4 <__divsf3_pse+0x6c>
 900:	86 95       	lsr	r24
 902:	77 95       	ror	r23
 904:	67 95       	ror	r22
 906:	b7 95       	ror	r27
 908:	f7 95       	ror	r31
 90a:	9f 5f       	subi	r25, 0xFF	; 255
 90c:	c9 f7       	brne	.-14     	; 0x900 <__stack+0x1>
 90e:	88 0f       	add	r24, r24
 910:	91 1d       	adc	r25, r1
 912:	96 95       	lsr	r25
 914:	87 95       	ror	r24
 916:	97 f9       	bld	r25, 7
 918:	08 95       	ret
 91a:	e1 e0       	ldi	r30, 0x01	; 1
 91c:	66 0f       	add	r22, r22
 91e:	77 1f       	adc	r23, r23
 920:	88 1f       	adc	r24, r24
 922:	bb 1f       	adc	r27, r27
 924:	62 17       	cp	r22, r18
 926:	73 07       	cpc	r23, r19
 928:	84 07       	cpc	r24, r20
 92a:	ba 07       	cpc	r27, r26
 92c:	20 f0       	brcs	.+8      	; 0x936 <__stack+0x37>
 92e:	62 1b       	sub	r22, r18
 930:	73 0b       	sbc	r23, r19
 932:	84 0b       	sbc	r24, r20
 934:	ba 0b       	sbc	r27, r26
 936:	ee 1f       	adc	r30, r30
 938:	88 f7       	brcc	.-30     	; 0x91c <__stack+0x1d>
 93a:	e0 95       	com	r30
 93c:	08 95       	ret

0000093e <__fixunssfsi>:
 93e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fp_splitA>
 942:	88 f0       	brcs	.+34     	; 0x966 <__fixunssfsi+0x28>
 944:	9f 57       	subi	r25, 0x7F	; 127
 946:	98 f0       	brcs	.+38     	; 0x96e <__fixunssfsi+0x30>
 948:	b9 2f       	mov	r27, r25
 94a:	99 27       	eor	r25, r25
 94c:	b7 51       	subi	r27, 0x17	; 23
 94e:	b0 f0       	brcs	.+44     	; 0x97c <__fixunssfsi+0x3e>
 950:	e1 f0       	breq	.+56     	; 0x98a <__fixunssfsi+0x4c>
 952:	66 0f       	add	r22, r22
 954:	77 1f       	adc	r23, r23
 956:	88 1f       	adc	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	1a f0       	brmi	.+6      	; 0x962 <__fixunssfsi+0x24>
 95c:	ba 95       	dec	r27
 95e:	c9 f7       	brne	.-14     	; 0x952 <__fixunssfsi+0x14>
 960:	14 c0       	rjmp	.+40     	; 0x98a <__fixunssfsi+0x4c>
 962:	b1 30       	cpi	r27, 0x01	; 1
 964:	91 f0       	breq	.+36     	; 0x98a <__fixunssfsi+0x4c>
 966:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_zero>
 96a:	b1 e0       	ldi	r27, 0x01	; 1
 96c:	08 95       	ret
 96e:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_zero>
 972:	67 2f       	mov	r22, r23
 974:	78 2f       	mov	r23, r24
 976:	88 27       	eor	r24, r24
 978:	b8 5f       	subi	r27, 0xF8	; 248
 97a:	39 f0       	breq	.+14     	; 0x98a <__fixunssfsi+0x4c>
 97c:	b9 3f       	cpi	r27, 0xF9	; 249
 97e:	cc f3       	brlt	.-14     	; 0x972 <__fixunssfsi+0x34>
 980:	86 95       	lsr	r24
 982:	77 95       	ror	r23
 984:	67 95       	ror	r22
 986:	b3 95       	inc	r27
 988:	d9 f7       	brne	.-10     	; 0x980 <__fixunssfsi+0x42>
 98a:	3e f4       	brtc	.+14     	; 0x99a <__fixunssfsi+0x5c>
 98c:	90 95       	com	r25
 98e:	80 95       	com	r24
 990:	70 95       	com	r23
 992:	61 95       	neg	r22
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	08 95       	ret

0000099c <__fp_inf>:
 99c:	97 f9       	bld	r25, 7
 99e:	9f 67       	ori	r25, 0x7F	; 127
 9a0:	80 e8       	ldi	r24, 0x80	; 128
 9a2:	70 e0       	ldi	r23, 0x00	; 0
 9a4:	60 e0       	ldi	r22, 0x00	; 0
 9a6:	08 95       	ret

000009a8 <__fp_nan>:
 9a8:	9f ef       	ldi	r25, 0xFF	; 255
 9aa:	80 ec       	ldi	r24, 0xC0	; 192
 9ac:	08 95       	ret

000009ae <__fp_pscA>:
 9ae:	00 24       	eor	r0, r0
 9b0:	0a 94       	dec	r0
 9b2:	16 16       	cp	r1, r22
 9b4:	17 06       	cpc	r1, r23
 9b6:	18 06       	cpc	r1, r24
 9b8:	09 06       	cpc	r0, r25
 9ba:	08 95       	ret

000009bc <__fp_pscB>:
 9bc:	00 24       	eor	r0, r0
 9be:	0a 94       	dec	r0
 9c0:	12 16       	cp	r1, r18
 9c2:	13 06       	cpc	r1, r19
 9c4:	14 06       	cpc	r1, r20
 9c6:	05 06       	cpc	r0, r21
 9c8:	08 95       	ret

000009ca <__fp_round>:
 9ca:	09 2e       	mov	r0, r25
 9cc:	03 94       	inc	r0
 9ce:	00 0c       	add	r0, r0
 9d0:	11 f4       	brne	.+4      	; 0x9d6 <__fp_round+0xc>
 9d2:	88 23       	and	r24, r24
 9d4:	52 f0       	brmi	.+20     	; 0x9ea <__fp_round+0x20>
 9d6:	bb 0f       	add	r27, r27
 9d8:	40 f4       	brcc	.+16     	; 0x9ea <__fp_round+0x20>
 9da:	bf 2b       	or	r27, r31
 9dc:	11 f4       	brne	.+4      	; 0x9e2 <__fp_round+0x18>
 9de:	60 ff       	sbrs	r22, 0
 9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__fp_round+0x20>
 9e2:	6f 5f       	subi	r22, 0xFF	; 255
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	8f 4f       	sbci	r24, 0xFF	; 255
 9e8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ea:	08 95       	ret

000009ec <__fp_split3>:
 9ec:	57 fd       	sbrc	r21, 7
 9ee:	90 58       	subi	r25, 0x80	; 128
 9f0:	44 0f       	add	r20, r20
 9f2:	55 1f       	adc	r21, r21
 9f4:	59 f0       	breq	.+22     	; 0xa0c <__fp_splitA+0x10>
 9f6:	5f 3f       	cpi	r21, 0xFF	; 255
 9f8:	71 f0       	breq	.+28     	; 0xa16 <__fp_splitA+0x1a>
 9fa:	47 95       	ror	r20

000009fc <__fp_splitA>:
 9fc:	88 0f       	add	r24, r24
 9fe:	97 fb       	bst	r25, 7
 a00:	99 1f       	adc	r25, r25
 a02:	61 f0       	breq	.+24     	; 0xa1c <__fp_splitA+0x20>
 a04:	9f 3f       	cpi	r25, 0xFF	; 255
 a06:	79 f0       	breq	.+30     	; 0xa26 <__fp_splitA+0x2a>
 a08:	87 95       	ror	r24
 a0a:	08 95       	ret
 a0c:	12 16       	cp	r1, r18
 a0e:	13 06       	cpc	r1, r19
 a10:	14 06       	cpc	r1, r20
 a12:	55 1f       	adc	r21, r21
 a14:	f2 cf       	rjmp	.-28     	; 0x9fa <__fp_split3+0xe>
 a16:	46 95       	lsr	r20
 a18:	f1 df       	rcall	.-30     	; 0x9fc <__fp_splitA>
 a1a:	08 c0       	rjmp	.+16     	; 0xa2c <__fp_splitA+0x30>
 a1c:	16 16       	cp	r1, r22
 a1e:	17 06       	cpc	r1, r23
 a20:	18 06       	cpc	r1, r24
 a22:	99 1f       	adc	r25, r25
 a24:	f1 cf       	rjmp	.-30     	; 0xa08 <__fp_splitA+0xc>
 a26:	86 95       	lsr	r24
 a28:	71 05       	cpc	r23, r1
 a2a:	61 05       	cpc	r22, r1
 a2c:	08 94       	sec
 a2e:	08 95       	ret

00000a30 <__fp_zero>:
 a30:	e8 94       	clt

00000a32 <__fp_szero>:
 a32:	bb 27       	eor	r27, r27
 a34:	66 27       	eor	r22, r22
 a36:	77 27       	eor	r23, r23
 a38:	cb 01       	movw	r24, r22
 a3a:	97 f9       	bld	r25, 7
 a3c:	08 95       	ret

00000a3e <__udivmodqi4>:
 a3e:	99 1b       	sub	r25, r25
 a40:	79 e0       	ldi	r23, 0x09	; 9
 a42:	04 c0       	rjmp	.+8      	; 0xa4c <__udivmodqi4_ep>

00000a44 <__udivmodqi4_loop>:
 a44:	99 1f       	adc	r25, r25
 a46:	96 17       	cp	r25, r22
 a48:	08 f0       	brcs	.+2      	; 0xa4c <__udivmodqi4_ep>
 a4a:	96 1b       	sub	r25, r22

00000a4c <__udivmodqi4_ep>:
 a4c:	88 1f       	adc	r24, r24
 a4e:	7a 95       	dec	r23
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__udivmodqi4_loop>
 a52:	80 95       	com	r24
 a54:	08 95       	ret

00000a56 <_exit>:
 a56:	f8 94       	cli

00000a58 <__stop_program>:
 a58:	ff cf       	rjmp	.-2      	; 0xa58 <__stop_program>
